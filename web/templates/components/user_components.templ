package components

import (
	"fmt"
	"strconv"
	"github.com/LarsArtmann/template-arch-lint/internal/domain/entities"
)

// StatsGrid renders statistics cards
templ StatsGrid(stats map[string]int) {
	<div class="grid grid-cols-1 md:grid-cols-4 gap-6">
		<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
			<div class="flex items-center">
				<div class="flex-shrink-0">
					<svg class="h-8 w-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"/>
					</svg>
				</div>
				<div class="ml-4">
					<p class="text-sm font-medium text-gray-500">Total Users</p>
					<p class="text-2xl font-bold text-gray-900">{ strconv.Itoa(stats["total"]) }</p>
				</div>
			</div>
		</div>
		
		<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
			<div class="flex items-center">
				<div class="flex-shrink-0">
					<svg class="h-8 w-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
					</svg>
				</div>
				<div class="ml-4">
					<p class="text-sm font-medium text-gray-500">Active Users</p>
					<p class="text-2xl font-bold text-gray-900">{ strconv.Itoa(stats["active"]) }</p>
				</div>
			</div>
		</div>
		
		<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
			<div class="flex items-center">
				<div class="flex-shrink-0">
					<svg class="h-8 w-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"/>
					</svg>
				</div>
				<div class="ml-4">
					<p class="text-sm font-medium text-gray-500">Domains</p>
					<p class="text-2xl font-bold text-gray-900">{ strconv.Itoa(stats["domains"]) }</p>
				</div>
			</div>
		</div>
		
		<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
			<div class="flex items-center">
				<div class="flex-shrink-0">
					<svg class="h-8 w-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
					</svg>
				</div>
				<div class="ml-4">
					<p class="text-sm font-medium text-gray-500">Avg Days</p>
					<p class="text-2xl font-bold text-gray-900">{ strconv.Itoa(stats["avg_days_since_registration"]) }</p>
				</div>
			</div>
		</div>
	</div>
}

// UsersList renders the list of users with HTMX interactions
templ UsersList(users []*entities.User) {
	<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
		if len(users) == 0 {
			<div class="p-12 text-center">
				<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"/>
				</svg>
				<h3 class="mt-2 text-sm font-medium text-gray-900">No users found</h3>
				<p class="mt-1 text-sm text-gray-500">Get started by creating a new user.</p>
				<div class="mt-6">
					<a href="/users/new" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
						Add User
					</a>
				</div>
			</div>
		} else {
			<div class="min-w-full divide-y divide-gray-200">
				<!-- Header -->
				<div class="bg-gray-50 px-6 py-3">
					<div class="flex items-center justify-between">
						<h3 class="text-xs font-medium text-gray-500 uppercase tracking-wider">Users ({ strconv.Itoa(len(users)) })</h3>
						<div class="text-xs text-gray-500">
							Click on a user to edit
						</div>
					</div>
				</div>
				
				<!-- User Rows -->
				<div class="bg-white divide-y divide-gray-200">
					for _, user := range users {
						@UserRow(user)
					}
				</div>
			</div>
		}
	</div>
}

// UserRow renders a single user row with inline editing capabilities
templ UserRow(user *entities.User) {
	<div id={ fmt.Sprintf("user-%s", user.ID.String()) } class="hover:bg-gray-50 transition-colors">
		<div class="px-6 py-4 flex items-center justify-between">
			<div class="flex items-center space-x-4 flex-1">
				<!-- Avatar -->
				<div class="flex-shrink-0">
					<div class="h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center">
						<span class="text-white font-medium">{ string(user.Name[0]) }</span>
					</div>
				</div>
				
				<!-- User Info -->
				<div class="flex-1 min-w-0">
					<div class="flex items-center space-x-2">
						<p class="text-sm font-medium text-gray-900 truncate">{ user.Name }</p>
						<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
							Active
						</span>
					</div>
					<p class="text-sm text-gray-500 truncate">{ user.Email }</p>
					<p class="text-xs text-gray-400">ID: { user.ID.String() }</p>
				</div>
				
				<!-- Created Date -->
				<div class="hidden md:block text-sm text-gray-500">
					{ user.Created.Format("Jan 2, 2006") }
				</div>
			</div>
			
			<!-- Actions -->
			<div class="flex items-center space-x-2">
				<!-- Edit Button -->
				<button type="button"
						class="text-blue-600 hover:text-blue-900 text-sm font-medium"
						hx-get={ fmt.Sprintf("/users/%s/edit-inline", user.ID.String()) }
						hx-target={ fmt.Sprintf("#user-%s", user.ID.String()) }
						hx-swap="outerHTML">
					Edit
				</button>
				
				<!-- Delete Button -->
				<button type="button"
						class="text-red-600 hover:text-red-900 text-sm font-medium"
						hx-delete={ fmt.Sprintf("/users/%s", user.ID.String()) }
						hx-confirm="Are you sure you want to delete this user?"
						hx-target={ fmt.Sprintf("#user-%s", user.ID.String()) }
						hx-swap="outerHTML swap:1s">
					Delete
				</button>
				
				<!-- View Detail Button -->
				<a href={ templ.URL(fmt.Sprintf("/users/%s", user.ID.String())) }
				   class="text-gray-600 hover:text-gray-900 text-sm font-medium">
					View
				</a>
			</div>
		</div>
	</div>
}

// UserEditRow renders an inline editing form for a user
templ UserEditRow(user *entities.User) {
	<div id={ fmt.Sprintf("user-%s", user.ID.String()) } class="bg-blue-50 border-l-4 border-blue-400">
		<form class="px-6 py-4"
			  hx-put={ fmt.Sprintf("/users/%s", user.ID.String()) }
			  hx-target={ fmt.Sprintf("#user-%s", user.ID.String()) }
			  hx-swap="outerHTML">
			<div class="flex items-center space-x-4">
				<!-- Avatar -->
				<div class="flex-shrink-0">
					<div class="h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center">
						<span class="text-white font-medium">{ string(user.Name[0]) }</span>
					</div>
				</div>
				
				<!-- Edit Form -->
				<div class="flex-1 grid grid-cols-1 md:grid-cols-2 gap-4">
					<div>
						<label for={ fmt.Sprintf("name-%s", user.ID.String()) } class="sr-only">Name</label>
						<input type="text" 
							   id={ fmt.Sprintf("name-%s", user.ID.String()) }
							   name="name" 
							   value={ user.Name }
							   class="block w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 text-sm"
							   placeholder="User name"
							   required/>
					</div>
					<div>
						<label for={ fmt.Sprintf("email-%s", user.ID.String()) } class="sr-only">Email</label>
						<input type="email" 
							   id={ fmt.Sprintf("email-%s", user.ID.String()) }
							   name="email" 
							   value={ user.Email }
							   class="block w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 text-sm"
							   placeholder="user@example.com"
							   required/>
					</div>
				</div>
				
				<!-- Action Buttons -->
				<div class="flex items-center space-x-2">
					<button type="submit" 
							class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm font-medium transition-colors">
						Save
					</button>
					<button type="button"
							class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-1 rounded text-sm font-medium transition-colors"
							hx-get={ fmt.Sprintf("/users/%s/cancel-edit", user.ID.String()) }
							hx-target={ fmt.Sprintf("#user-%s", user.ID.String()) }
							hx-swap="outerHTML">
						Cancel
					</button>
				</div>
			</div>
		</form>
	</div>
}

// UserForm renders a user creation/edit form
templ UserForm(user *entities.User, mode string) {
	<form if mode == "create" {
			hx-post="/users"
			hx-target="this"
			hx-swap="outerHTML"
		  } else {
			hx-put={ fmt.Sprintf("/users/%s", user.ID.String()) }
			hx-target="this"
			hx-swap="outerHTML"
		  }>
		
		<div class="space-y-4">
			if mode == "create" {
				<div>
					<label for="id" class="block text-sm font-medium text-gray-700">User ID</label>
					<input type="text" 
						   id="id" 
						   name="id" 
						   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
						   placeholder="unique-user-id"
						   required/>
					<p class="mt-1 text-xs text-gray-500">Must be unique (e.g., user123)</p>
				</div>
			}
			
			<div>
				<label for="name" class="block text-sm font-medium text-gray-700">Full Name</label>
				<input type="text" 
					   id="name" 
					   name="name" 
					   if user != nil {
					   		value={ user.Name }
					   }
					   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
					   placeholder="John Doe"
					   required/>
			</div>
			
			<div>
				<label for="email" class="block text-sm font-medium text-gray-700">Email Address</label>
				<input type="email" 
					   id="email" 
					   name="email" 
					   if user != nil {
					   		value={ user.Email }
					   }
					   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
					   placeholder="john@example.com"
					   required/>
			</div>
		</div>
		
		<div class="mt-6 flex justify-end space-x-3">
			<a href="/users" 
			   class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md font-medium transition-colors">
				Cancel
			</a>
			<button type="submit" 
					class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium transition-colors">
				if mode == "create" {
					Create User
				} else {
					Update User
				}
			</button>
		</div>
	</form>
}

// UserFormSuccess renders success message after user creation/update
templ UserFormSuccess(user *entities.User, action string) {
	<div class="bg-green-50 border border-green-200 rounded-md p-4">
		<div class="flex">
			<svg class="h-5 w-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
				<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
			</svg>
			<div class="ml-3">
				<h3 class="text-sm font-medium text-green-800">
					User { action } successfully!
				</h3>
				<p class="mt-1 text-sm text-green-700">
					{ user.Name } ({ user.Email }) has been { action }.
				</p>
				<div class="mt-3">
					<a href="/users" class="text-green-700 hover:text-green-600 font-medium text-sm">
						← Back to Users List
					</a>
				</div>
			</div>
		</div>
	</div>
}

// ErrorMessage renders error messages
templ ErrorMessage(message string, details string) {
	<div class="bg-red-50 border border-red-200 rounded-md p-4">
		<div class="flex">
			<svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
				<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
			</svg>
			<div class="ml-3">
				<h3 class="text-sm font-medium text-red-800">Error</h3>
				<p class="mt-1 text-sm text-red-700">{ message }</p>
				if details != "" {
					<p class="mt-1 text-xs text-red-600">{ details }</p>
				}
			</div>
		</div>
	</div>
}