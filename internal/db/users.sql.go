//go:build sqlite3

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/LarsArtmann/template-arch-lint/internal/domain/values"
)

const CountUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

// CountUsers
//
//	SELECT COUNT(*) FROM users
func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countUsersStmt, CountUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

// DeleteUser
//
//	DELETE FROM users WHERE id = ?
func (q *Queries) DeleteUser(ctx context.Context, id values.UserID) error {
	_, err := q.exec(ctx, q.deleteUserStmt, DeleteUser, id)
	return err
}

const FindUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, name, created, modified
FROM users
WHERE email = ?
`

// FindUserByEmail
//
//	SELECT id, email, name, created, modified
//	FROM users
//	WHERE email = ?
func (q *Queries) FindUserByEmail(ctx context.Context, email string) (*Users, error) {
	row := q.queryRow(ctx, q.findUserByEmailStmt, FindUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Created,
		&i.Modified,
	)
	return &i, err
}

const FindUserByID = `-- name: FindUserByID :one
SELECT id, email, name, created, modified
FROM users
WHERE id = ?
`

// FindUserByID
//
//	SELECT id, email, name, created, modified
//	FROM users
//	WHERE id = ?
func (q *Queries) FindUserByID(ctx context.Context, id values.UserID) (*Users, error) {
	row := q.queryRow(ctx, q.findUserByIDStmt, FindUserByID, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Created,
		&i.Modified,
	)
	return &i, err
}

const ListUsers = `-- name: ListUsers :many
SELECT id, email, name, created, modified
FROM users
ORDER BY created ASC
`

// ListUsers
//
//	SELECT id, email, name, created, modified
//	FROM users
//	ORDER BY created ASC
func (q *Queries) ListUsers(ctx context.Context) ([]*Users, error) {
	rows, err := q.query(ctx, q.listUsersStmt, ListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.Created,
			&i.Modified,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SaveUser = `-- name: SaveUser :exec

INSERT OR REPLACE INTO users (id, email, name, created, modified)
VALUES (?, ?, ?, ?, ?)
`

type SaveUserParams struct {
	ID       values.UserID `db:"id" json:"id"`
	Email    string        `db:"email" json:"email"`
	Name     string        `db:"name" json:"name"`
	Created  time.Time     `db:"created" json:"created"`
	Modified time.Time     `db:"modified" json:"modified"`
}

// Users CRUD queries
// Matches the existing UserRepository interface methods
//
//	INSERT OR REPLACE INTO users (id, email, name, created, modified)
//	VALUES (?, ?, ?, ?, ?)
func (q *Queries) SaveUser(ctx context.Context, arg *SaveUserParams) error {
	_, err := q.exec(ctx, q.saveUserStmt, SaveUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Created,
		arg.Modified,
	)
	return err
}
