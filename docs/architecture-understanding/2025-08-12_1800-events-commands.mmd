graph TB
    subgraph "üéØ Current Implementation: Service-Based Architecture"
        subgraph "üìù Service Layer (Business Logic)"
            USER_SERVICE[UserService<br/>‚Ä¢ CreateUser<br/>‚Ä¢ GetUser<br/>‚Ä¢ UpdateUser<br/>‚Ä¢ DeleteUser<br/>‚Ä¢ ListUsers]
            VALIDATION[Business Validation<br/>‚Ä¢ validateEmail<br/>‚Ä¢ validateUserName<br/>‚Ä¢ business rules]
        end
        
        subgraph "üèõÔ∏è Domain Model"
            USER_ENTITY[User Entity<br/>‚Ä¢ Domain logic<br/>‚Ä¢ Value objects<br/>‚Ä¢ Business rules]
            EMAIL_VO[Email Value Object<br/>‚Ä¢ Format validation<br/>‚Ä¢ Domain extraction]
            USERNAME_VO[UserName Value Object<br/>‚Ä¢ Length validation<br/>‚Ä¢ Reserved names]
            USER_ID_VO[UserID Value Object<br/>‚Ä¢ Identity management<br/>‚Ä¢ Empty checks]
        end
        
        subgraph "üìä Repository Pattern"
            USER_REPO_INTERFACE[UserRepository Interface<br/>‚Ä¢ FindByID<br/>‚Ä¢ FindByEmail<br/>‚Ä¢ Save<br/>‚Ä¢ Delete<br/>‚Ä¢ List]
            USER_REPO_IMPL[SQLC Implementation<br/>‚Ä¢ Type-safe SQL<br/>‚Ä¢ Database operations]
        end
        
        subgraph "üóÑÔ∏è Data Layer"
            SQLITE_DB[(SQLite Database<br/>users table)]
            SQLC_GENERATED[SQLC Generated<br/>‚Ä¢ Type-safe queries<br/>‚Ä¢ Go structs<br/>‚Ä¢ Query validation]
        end
    end
    
    subgraph "üîÑ Functional Programming Patterns"
        RAILWAY_ORP[Railway Oriented Programming<br/>‚Ä¢ Result pattern<br/>‚Ä¢ Option pattern<br/>‚Ä¢ Either pattern]
        SAMBER_LO[samber/lo Integration<br/>‚Ä¢ Filter operations<br/>‚Ä¢ Map operations<br/>‚Ä¢ Reduce operations]
    end
    
    subgraph "üåê Application Layer"
        HTTP_HANDLERS[HTTP Handlers<br/>‚Ä¢ Template rendering<br/>‚Ä¢ JSON API<br/>‚Ä¢ HTMX endpoints]
        MIDDLEWARE[Middleware Stack<br/>‚Ä¢ Error handling<br/>‚Ä¢ Validation<br/>‚Ä¢ Logging]
    end
    
    %% Flow Connections
    HTTP_HANDLERS --> USER_SERVICE
    USER_SERVICE --> VALIDATION
    USER_SERVICE --> USER_ENTITY
    USER_ENTITY --> EMAIL_VO
    USER_ENTITY --> USERNAME_VO
    USER_ENTITY --> USER_ID_VO
    USER_SERVICE --> USER_REPO_INTERFACE
    USER_REPO_INTERFACE --> USER_REPO_IMPL
    USER_REPO_IMPL --> SQLC_GENERATED
    SQLC_GENERATED --> SQLITE_DB
    
    %% Functional Programming Integration
    USER_SERVICE -.-> RAILWAY_ORP
    USER_SERVICE -.-> SAMBER_LO
    
    %% Styling
    classDef serviceClass fill:#e1f5fe
    classDef domainClass fill:#f3e5f5
    classDef repoClass fill:#e8f5e8
    classDef dataClass fill:#fff3e0
    classDef functionalClass fill:#fce4ec
    
    class USER_SERVICE,VALIDATION serviceClass
    class USER_ENTITY,EMAIL_VO,USERNAME_VO,USER_ID_VO domainClass
    class USER_REPO_INTERFACE,USER_REPO_IMPL repoClass
    class SQLITE_DB,SQLC_GENERATED dataClass
    class RAILWAY_ORP,SAMBER_LO functionalClass
    
    %% Notes
    USER_SERVICE -.- NOTE1[üîç No event sourcing<br/>Traditional CRUD operations]
    USER_ENTITY -.- NOTE2[üéØ Rich domain model<br/>Value objects for validation]
    SQLC_GENERATED -.- NOTE3[‚ö° Type-safe SQL<br/>Compile-time validation]