# üî• ENTERPRISE-GRADE GOLANGCI-LINT CONFIGURATION
# üö® MAXIMUM STRICTNESS - ZERO TOLERANCE FOR CODE QUALITY VIOLATIONS
#
# This configuration enforces the highest standards of Go code quality
# Designed for mission-critical production systems with zero defect tolerance

version: 2

run:
  timeout: 5m
  issues-exit-code: 1
  tests: true
  modules-download-mode: readonly
  allow-parallel-runners: true
  go: "1.25"
  env:
    - GODEBUG=gotypesalias=1

# üî• LINTERS - Maximum enforcement (essential set)
linters:
  enable:
    # üö® TYPE SAFETY ENFORCEMENT
    - forbidigo      # Custom forbidden patterns
    - govet          # Suspicious constructs
    - staticcheck    # Advanced static analysis
    - asasalint      # Pass []any as any in variadic funcs (type safety)

    # üõ°Ô∏è ERROR HANDLING
    - errcheck       # Unchecked errors
    - errorlint      # Error wrapping
    - nilerr         # Nil error returns

    # üîí SECURITY
    - gosec          # Security audit
    - copyloopvar    # Loop variable copies
    - bidichk        # Dangerous unicode character sequences (security)
    - noctx          # HTTP context validation
    - contextcheck   # Non-inherited context usage detection
    - containedctx   # Context.Context field in struct detection
    - wrapcheck      # Error wrapping enforcement
    - nilnesserr     # Advanced nil error checking

    # üìä CODE QUALITY
    - bodyclose      # HTTP body closure
    - cyclop         # Cyclomatic complexity
    - exhaustive     # Switch statement completeness
    - gochecksumtype # Exhaustiveness checks on Go sum types
    - funlen         # Function length
    - gocognit       # Cognitive complexity
    - gocyclo        # Cyclomatic complexity
    - goconst        # Magic string detection (repeated constants)
    - gocritic       # Opinionated checks
    - gomoddirectives # go.mod validation
    - goprintffuncname # Printf function naming
    - ineffassign    # Ineffective assignments
    - misspell       # Spelling errors
    - nakedret       # Naked returns
    - nestif         # Deep nesting prevention
    - nolintlint     # Nolint comment validation
    - prealloc       # Slice preallocation
    - revive         # Comprehensive checks
    - rowserrcheck   # SQL rows error handling
    - sqlclosecheck  # SQL resource closure
    - tparallel      # Test parallelism
    - testpackage    # Separate _test package enforcement
    - thelper        # Test helpers must use t.Helper()
    - testifylint    # Testify usage validation
    - unconvert      # Unnecessary conversions
    - unparam        # Unused parameters
    - unused         # Unused code
    - whitespace     # Trailing whitespace
    - godot          # Comment punctuation
    
    # üöÄ MODERN GO FEATURES
    - fatcontext     # Nested context detection
    - intrange       # Modern range loop opportunities
    - perfsprint     # Performance-focused sprintf replacements
    - sloglint       # Standard slog usage validation
    - spancheck      # OpenTelemetry span validation
    - usestdlibvars  # Standard library constant usage

    # üèóÔ∏è ARCHITECTURE & BEST PRACTICES
    - gochecknoinits # No init functions (anti-pattern)
    - gochecknoglobals # No global variables
    - lll            # Line length limits
    - godox          # TODO/FIXME/HACK detection
    - mnd            # Magic number detection (modern replacement for gomnd)

    # üíÄ DEAD CODE DETECTION
    - unused         # Comprehensive unused code detection (replaces deadcode, varcheck, structcheck)


# üîß LINTER SETTINGS - Maximum strictness
linters-settings:
  # üö® TYPE SAFETY & STRUCTURED LOGGING - ZERO TOLERANCE
  forbidigo:
    forbid:
      # Type safety violations
      - p: 'interface\{\}'
        msg: "üö® BANNED: interface{} erases type safety. Use specific types or generics"
      - p: '\bany\b'
        msg: "üö® BANNED: any erases type safety. Use specific types or generics"
      - p: 'panic\('
        msg: "üö® BANNED: panic() crashes programs. Return errors instead"
      
      # Structured logging enforcement (inspired by Uniflow)
      - p: '^fmt\.Print.*$'
        msg: "üö® BANNED: Do not commit print statements. Use github.com/charmbracelet/log for structured logging"
      - p: '^log\..*$'
        msg: "üö® BANNED: Do not use standard log package. Use github.com/charmbracelet/log for structured logging"  
      - p: '^print$|^println$'
        msg: "üö® BANNED: Do not commit print statements. Use structured logging instead"
      - p: 'fmt\.Printf.*'
        msg: "üö® BANNED: Use structured logging instead of fmt.Printf. Prefer log.Info() with fields"

    analyze-types: true

  # Cyclomatic complexity
  cyclop:
    max-complexity: 10
    package-average: 5.0
    skip-tests: false

  gocyclo:
    min-complexity: 10

  # Cognitive complexity
  gocognit:
    min-complexity: 10

  # Function length
  funlen:
    lines: 50
    statements: 30
    ignore-comments: false

  # Error handling
  errcheck:
    check-type-assertions: true
    check-blank: true
    # üÜï Function-specific exclusions (smart defaults)
    exclude-functions:
      # Resource cleanup - errors in defer contexts are typically non-critical
      - (io.Closer).Close
      - (*os.File).Close
      - (net.Conn).Close
      - (*net.TCPConn).Close
      - (*net.UDPConn).Close
      - (*sql.DB).Close
      - (*sql.Rows).Close
      - (*sql.Stmt).Close
      
      # Formatting operations - rarely fail and errors are usually non-critical
      - fmt.Fprint
      - fmt.Fprintf  
      - fmt.Fprintln
      - fmt.Print
      - fmt.Printf
      - fmt.Println
      
      # Buffer operations - bytes.Buffer operations never fail
      - (*bytes.Buffer).Write
      - (*bytes.Buffer).WriteByte
      - (*bytes.Buffer).WriteRune
      - (*bytes.Buffer).WriteString
      
      # String builder operations - strings.Builder operations never fail
      - (*strings.Builder).Write
      - (*strings.Builder).WriteByte
      - (*strings.Builder).WriteRune  
      - (*strings.Builder).WriteString

  errorlint:
    errorf: true
    errorf-multi: true
    asserts: true
    comparison: true

  # Security
  gosec:
    severity: low
    confidence: low
    excludes: []

  # Static analysis
  staticcheck:
    checks: ["all"]

  stylecheck:
    checks: ["all"]

  # Go vet with MAXIMUM analyzers enabled
  govet:
    # Enable ALL available analyzers for maximum coverage
    enable-all: true
    # Note: when using enable-all, specific enables are not needed

  # Go critic
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks: []

  # Unused code
  unused: {}

  unparam:
    check-exported: true

  # Revive rules
  revive:
    severity: error
    enable-all-rules: true
    rules:
      # üìè FILE LENGTH ENFORCEMENT
      - name: file-length-limit
        severity: error
        arguments:
          - max: 400

  # Nesting complexity
  nestif:
    min-complexity: 4

  # Exhaustiveness
  exhaustive:
    check-generated: false
    default-signifies-exhaustive: true

  # Preallocation
  prealloc:
    simple: true
    range-loops: true
    for-loops: false

  # Error wrapping
  wrapcheck:
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(
    ignoreSigRegexps:
      - \.New.*Error\(
    ignorePackageGlobs:
      - encoding/*
      - github.com/pkg/*

  # Comment punctuation
  godot:
    scope: declarations
    exclude: []
    capital: false

  # üèóÔ∏è ARCHITECTURE ENFORCEMENT
  gochecknoinits: {}
  
  gochecknoglobals:
    # Allow global variables only in main packages and tests
    exclude-files:
      - "main\\.go$"
      - ".*_test\\.go$"

  # Line length limits
  lll:
    line-length: 120
    tab-width: 4

  # üìù TODO/FIXME/HACK detection (Enterprise-grade)
  godox:
    keywords:
      # Standard markers
      - TODO
      - FIXME
      - HACK
      - BUG
      - XXX
      
      # Enterprise-specific markers
      - SECURITY     # Security-related todos
      - PERFORMANCE  # Performance optimizations needed
      - DEBT         # Technical debt markers
      - REVIEW       # Code review follow-ups
      - REFACTOR     # Refactoring needed
      - TEST         # Missing tests
      - DEPRECATED   # Deprecated code markers

  # Magic number detection (modern replacement for gomnd)
  mnd:
    # Ignored numbers (common constants that don't need extraction)
    ignored-numbers:
      - '0'
      - '1' 
      - '2'
      - '10'
      - '100'
      - '1000'
    # Ignored functions where numbers are acceptable
    ignored-functions:
      - 'strconv.ParseInt'
      - 'strconv.ParseFloat'
      - 'time.Sleep'
      - 'time.Duration'
  
  # üöÄ MODERN GO LINTER SETTINGS
  
  # Nested context detection
  fatcontext:
    ignore-len: 3
  
  # Modern range loop opportunities  
  intrange:
    skip-generated-code: true
    
  # Performance sprintf replacements
  perfsprint:
    int-conversion: true
    err-error: true
    sprintf1: true
    strconcat: true
    
  # Standard slog usage validation
  sloglint:
    no-mixed-args: true
    kv-check: true
    attr-check: true
    context-only: true
    static-msg: true
    
  # OpenTelemetry span validation
  spancheck:
    checks:
      - end
      - record-error
      - set-status
    ignore-check-signatures:
      - "telemetry.Record"
      - "telemetry.RecordError"
      
  # Standard library constant usage
  usestdlibvars:
    http-method: true
    http-status-code: true
    time-weekday: true
    time-month: true
    time-layout: true
    crypto-hash: true
    default-rpc-path: true
    
  # Advanced nil error checking  
  nilnesserr:
    check-len: true
    check-cap: true

  # üÜï NEW ENTERPRISE LINTERS (v2.4.0)
  
  # Unicode security - dangerous character sequences
  bidichk:
    left-to-right-embedding: true
    right-to-left-embedding: true
    pop-directional-formatting: true
    left-to-right-override: true
    right-to-left-override: true
    left-to-right-isolate: true
    right-to-left-isolate: true
    first-strong-isolate: true
    pop-directional-isolate: true
    
  # Type safety - variadic function []any misuse
  asasalint:
    exclude:
      - ".*\\.pb\\.go$"    # Exclude protobuf generated files
      - ".*_gen\\.go$"     # Exclude generated files
      
  # Sum type exhaustiveness (modern type pattern enforcement)  
  gochecksumtype:
    exhaustive: true
    default-signifies-exhaustive: false
    
  # Context handling improvements
  contextcheck:
    check-all: true
    
  containedctx:
    check-all: true
    
  # Testing quality enforcement  
  testpackage:
    skip-regexp: ".*_internal_test\\.go$"
    
  thelper:
    test:
      first: true
      name: true
      begin: true
    benchmark:
      first: true
      name: true
      begin: true
    tb:
      first: true
      name: true
      begin: true
      
  testifylint:
    enable-all: true

# üö® ISSUES CONFIGURATION
# Note: Formatters (gofumpt, goimports) should be run separately via 'just fix'
issues:
  max-issues-per-linter: 0
  max-same-issues: 0

  exclude-use-default: false
  exclude-rules-use-default: false

  # Common false positives preset
  exclude-dir-use-default: false

  exclude-rules:
    # Allow panics only in main/cmd
    - path: ^(main\.go|cmd/.+)$
      linters:
        - forbidigo
      text: "panic"

    # Allow longer functions in tests
    - path: _test\.go
      linters:
        - funlen
        - gocognit
        - gocyclo
        - cyclop

    # üìè File length exemptions for generated files
    - path: ".*_gen\\.go$|.*\\.pb\\.go$|.*_templ\\.go$|.*\\.sql\\.go$|internal/db/.*\\.go$"
      linters:
        - revive
      text: "file-length-limit"

    # Allow longer test files for comprehensive test suites
    - path: "_test\\.go$"
      linters:
        - revive
      text: "file-length-limit"

  exclude-dirs:
    - vendor
    - node_modules   # Frontend dependencies 
    - testdata
    - examples
    - docs
    - generated
    - mocks
    - .git
    - .github

  exclude-files:
    - ".*\\.pb\\.go$"
    - ".*_generated\\.go$"
    - ".*_gen\\.go$"
    - "mock_.*\\.go$"

# üìä OUTPUT CONFIGURATION
output:
  print-issued-lines: true
  print-linter-name: true
  sort-results: true
