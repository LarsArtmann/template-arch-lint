# üî• ENTERPRISE-GRADE GOLANGCI-LINT CONFIGURATION
# üö® MAXIMUM STRICTNESS - ZERO TOLERANCE FOR CODE QUALITY VIOLATIONS
#
# This configuration enforces the highest standards of Go code quality
# Designed for mission-critical production systems with zero defect tolerance

version: "2"

run:
  timeout: 5m
  issues-exit-code: 1
  tests: true
  modules-download-mode: readonly
  allow-parallel-runners: true
  go: "1.23"

# üî• LINTERS - Maximum enforcement (essential set)
linters:
  default: none
  enable:
    # üö® TYPE SAFETY ENFORCEMENT
    - forbidigo      # Custom forbidden patterns
    - govet          # Suspicious constructs
    - staticcheck    # Advanced static analysis
    
    # üõ°Ô∏è ERROR HANDLING
    - errcheck       # Unchecked errors
    - errorlint      # Error wrapping
    - nilerr         # Nil error returns
    
    # üîí SECURITY
    - gosec          # Security audit
    - copyloopvar    # Loop variable copies
    
    # üìä CODE QUALITY
    - bodyclose      # HTTP body closure
    - cyclop         # Cyclomatic complexity
    - funlen         # Function length
    - gocognit       # Cognitive complexity
    - gocyclo        # Cyclomatic complexity
    - goconst        # Repeated constants
    - gocritic       # Opinionated checks
    - ineffassign    # Ineffective assignments
    - misspell       # Spelling errors
    - nakedret       # Naked returns
    - revive         # Comprehensive checks
    - unconvert      # Unnecessary conversions
    - unparam        # Unused parameters
    - unused         # Unused code
    - whitespace     # Trailing whitespace

# üé® FORMATTERS - Code formatting
formatters:
  enable:
    - gofmt          # Standard Go formatting
    - goimports      # Import formatting

# üîß LINTER SETTINGS - Maximum strictness
linters-settings:
  # üö® TYPE SAFETY - ZERO TOLERANCE
  forbidigo:
    forbid:
      # Interface{} prohibition
      - p: 'interface\{\}'
        msg: "üö® BANNED: interface{} erases type safety. Use generic constraints or specific types."
      
      # Any type prohibition (simple pattern)
      - p: '\bany\b'
        msg: "üö® BANNED: 'any' erases type safety. Use specific types or constrained generics."
      
      # Panic prohibition
      - p: 'panic\('
        msg: "üö® BANNED: panic() causes runtime crashes. Return errors instead."
      
      # Print statements (should use logger)
      - p: 'fmt\.Print'
        msg: "üö® BANNED: Use structured logging instead of fmt.Print"
    
    analyze-types: true
  
  # Cyclomatic complexity
  cyclop:
    max-complexity: 10
    package-average: 5.0
    skip-tests: false
  
  gocyclo:
    min-complexity: 10
  
  # Cognitive complexity
  gocognit:
    min-complexity: 10
  
  # Function length
  funlen:
    lines: 50
    statements: 30
    ignore-comments: false
  
  # Error handling
  errcheck:
    check-type-assertions: true
    check-blank: true
    exclude-functions: []
  
  errorlint:
    errorf: true
    errorf-multi: true
    asserts: true
    comparison: true
  
  # Security
  gosec:
    severity: low
    confidence: low
    excludes: []
  
  # Static analysis
  staticcheck:
    checks: ["all"]
  
  stylecheck:
    checks: ["all"]
  
  # Go critic
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks: []
  
  # Unused code
  unused: {}
  
  unparam:
    check-exported: true
  
  # Revive rules
  revive:
    severity: error
    enable-all-rules: true

# üö® ISSUES CONFIGURATION
issues:
  max-issues-per-linter: 0
  max-same-issues: 0
  
  exclude-use-default: false
  
  exclude-rules:
    # Allow panics only in main/cmd
    - path: ^(main\.go|cmd/.+)$
      linters:
        - forbidigo
      text: "panic"
    
    # Allow longer functions in tests
    - path: _test\.go
      linters:
        - funlen
        - gocognit
        - gocyclo
        - cyclop
  
  exclude-dirs:
    - vendor
    - testdata
    - examples
    - internal
    - docs
    - generated
    - mocks
    - .git
    - .github
  
  exclude-files:
    - ".*\\.pb\\.go$"
    - ".*_generated\\.go$"
    - ".*_gen\\.go$"
    - "mock_.*\\.go$"

# üìä OUTPUT CONFIGURATION
output:
  format: colored-line-number
  
  print-issued-lines: true
  print-linter-name: true
  sort-results: true