# üî• ENTERPRISE-GRADE GOLANGCI-LINT CONFIGURATION
# üö® MAXIMUM STRICTNESS - ZERO TOLERANCE FOR CODE QUALITY VIOLATIONS
#
# This configuration enforces the highest standards of Go code quality
# Designed for mission-critical production systems with zero defect tolerance

# version: 1 (default, compatible with golangci-lint v1.64.8)

run:
  timeout: 5m
  issues-exit-code: 1
  tests: true
  modules-download-mode: readonly
  allow-parallel-runners: true
  go: "1.23"

# üî• LINTERS - Maximum enforcement (essential set)
linters:
  enable:
    # üö® TYPE SAFETY ENFORCEMENT
    - forbidigo      # Custom forbidden patterns
    - govet          # Suspicious constructs
    - staticcheck    # Advanced static analysis

    # üõ°Ô∏è ERROR HANDLING
    - errcheck       # Unchecked errors
    - errorlint      # Error wrapping
    - nilerr         # Nil error returns

    # üîí SECURITY
    - gosec          # Security audit
    - copyloopvar    # Loop variable copies
    - noctx          # HTTP context validation
    - wrapcheck      # Error wrapping enforcement

    # üìä CODE QUALITY
    - bodyclose      # HTTP body closure
    - cyclop         # Cyclomatic complexity
    - exhaustive     # Switch statement completeness
    - funlen         # Function length
    - gocognit       # Cognitive complexity
    - gocyclo        # Cyclomatic complexity
    - goconst        # Repeated constants
    - gocritic       # Opinionated checks
    - gomoddirectives # go.mod validation
    - goprintffuncname # Printf function naming
    - ineffassign    # Ineffective assignments
    - misspell       # Spelling errors
    - nakedret       # Naked returns
    - nestif         # Deep nesting prevention
    - nolintlint     # Nolint comment validation
    - prealloc       # Slice preallocation
    - revive         # Comprehensive checks
    - rowserrcheck   # SQL rows error handling
    - sqlclosecheck  # SQL resource closure
    - tparallel      # Test parallelism
    - unconvert      # Unnecessary conversions
    - unparam        # Unused parameters
    - unused         # Unused code
    - whitespace     # Trailing whitespace
    - godot          # Comment punctuation


# üîß LINTER SETTINGS - Maximum strictness
linters-settings:
  # üö® TYPE SAFETY - ZERO TOLERANCE
  forbidigo:
    forbid:
      - 'interface\{\}'
      - '\bany\b'
      - 'panic\('
      - 'fmt\.Print'

    analyze-types: true

  # Cyclomatic complexity
  cyclop:
    max-complexity: 10
    package-average: 5.0
    skip-tests: false

  gocyclo:
    min-complexity: 10

  # Cognitive complexity
  gocognit:
    min-complexity: 10

  # Function length
  funlen:
    lines: 50
    statements: 30
    ignore-comments: false

  # Error handling
  errcheck:
    check-type-assertions: true
    check-blank: true
    exclude-functions: []

  errorlint:
    errorf: true
    errorf-multi: true
    asserts: true
    comparison: true

  # Security
  gosec:
    severity: low
    confidence: low
    excludes: []

  # Static analysis
  staticcheck:
    checks: ["all"]

  stylecheck:
    checks: ["all"]

  # Go critic
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks: []

  # Unused code
  unused: {}

  unparam:
    check-exported: true

  # Revive rules
  revive:
    severity: error
    enable-all-rules: true

  # Nesting complexity
  nestif:
    min-complexity: 4

  # Exhaustiveness
  exhaustive:
    check-generated: false
    default-signifies-exhaustive: true

  # Preallocation
  prealloc:
    simple: true
    range-loops: true
    for-loops: false

  # Error wrapping
  wrapcheck:
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(
    ignoreSigRegexps:
      - \.New.*Error\(
    ignorePackageGlobs:
      - encoding/*
      - github.com/pkg/*

  # Comment punctuation
  godot:
    scope: declarations
    exclude: []
    capital: false

# üö® ISSUES CONFIGURATION
# Note: Formatters (gofumpt, goimports) should be run separately via 'just fix'
issues:
  max-issues-per-linter: 0
  max-same-issues: 0

  exclude-use-default: false
  exclude-rules-use-default: false

  # Common false positives preset
  exclude-dir-use-default: false

  exclude-rules:
    # Allow panics only in main/cmd
    - path: ^(main\.go|cmd/.+)$
      linters:
        - forbidigo
      text: "panic"

    # Allow longer functions in tests
    - path: _test\.go
      linters:
        - funlen
        - gocognit
        - gocyclo
        - cyclop

  exclude-dirs:
    - vendor
    - testdata
    - examples
    - docs
    - generated
    - mocks
    - .git
    - .github

  exclude-files:
    - ".*\\.pb\\.go$"
    - ".*_generated\\.go$"
    - ".*_gen\\.go$"
    - "mock_.*\\.go$"

# üìä OUTPUT CONFIGURATION
output:
  print-issued-lines: true
  print-linter-name: true
  sort-results: true
