# üî• CI/CD PIPELINE - Complete Architecture & Quality Enforcement
# Complete automation for Go application with security, quality, architecture validation, and testing
name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24.0'
  GOLANGCI_LINT_VERSION: 'v2.3.1'
  GO_ARCH_LINT_VERSION: 'v1.12.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write
  packages: write
  attestations: write
  id-token: write

jobs:
  # üîç Basic validation and setup
  validate:
    name: üîç Validate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: üìã Verify dependencies
        run: |
          go mod download
          go mod verify
          go mod tidy -diff

      - name: üìÅ Check filenames
        run: |
          if find . -name "*:*" -not -path "./.git/*" | grep -q .; then
            echo "‚ùå Found files with colons in names:"
            find . -name "*:*" -not -path "./.git/*"
            exit 1
          else
            echo "‚úÖ No problematic filenames found!"
          fi

  # üîí Security scanning
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: üîç Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          config: |
            name: "CodeQL Config"
            queries:
              - uses: security-and-quality

      - name: üèóÔ∏è Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go"

      - name: üõ°Ô∏è Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: üì§ Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # üèóÔ∏è Build validation
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: üì¶ Install dependencies
        run: go mod download

      - name: üé® Install and generate templates
        run: |
          go install github.com/a-h/templ/cmd/templ@latest
          templ generate

      - name: üèóÔ∏è Build application
        run: |
          go build ./...
          go build -o server cmd/server/main.go

      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            server
          retention-days: 1

  # üìä Code quality and linting (with architecture validation)
  quality:
    name: üìä Code Quality & Architecture
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: üì¶ Install dependencies
        run: go mod download

      - name: üé® Generate templates
        run: |
          go install github.com/a-h/templ/cmd/templ@latest
          templ generate

      - name: üèóÔ∏è Install architecture linter
        run: |
          go install github.com/fe3dback/go-arch-lint@${{ env.GO_ARCH_LINT_VERSION }}

      - name: üèóÔ∏è Run architecture validation
        run: |
          echo "üèóÔ∏è Running architecture validation..."
          go-arch-lint check
          echo "‚úÖ Architecture validation passed!"

      - name: üìã Install golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --config .golangci.yml --out-format=colored-line-number,checkstyle:golangci-lint-report.xml

      - name: üì§ Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: golangci-lint-report.xml
          retention-days: 30

  # üß™ Testing with coverage
  test:
    name: üß™ Test & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate
    strategy:
      matrix:
        go-version: ['1.24.0', '1.23.0']
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: üì¶ Install dependencies
        run: go mod download

      - name: üé® Generate templates
        run: |
          go install github.com/a-h/templ/cmd/templ@latest
          templ generate

      - name: üß™ Run tests with coverage
        run: |
          go test ./... -v -race -coverprofile=coverage.out -covermode=atomic -timeout=10m
          go tool cover -html=coverage.out -o coverage.html

      - name: üìä Generate coverage report
        run: |
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "### Go Version: ${{ matrix.go-version }}" >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage.out | tail -1 | awk '{print "**Total Coverage: " $3 "**"}' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Detailed Coverage:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage.out >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: üì§ Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-go-${{ matrix.go-version }}
          fail_ci_if_error: false

      - name: üì§ Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-go-${{ matrix.go-version }}
          path: |
            coverage.out
            coverage.html
          retention-days: 30

  # üîß Integration testing
  integration:
    name: üîß Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build, test]
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: üì¶ Install dependencies
        run: go mod download

      - name: üé® Generate templates
        run: |
          go install github.com/a-h/templ/cmd/templ@latest
          templ generate

      - name: üì• Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: üîß Run integration tests
        run: |
          chmod +x server
          go test ./test/integration/... -v -tags=integration -timeout=5m

      - name: üß™ Test configuration system
        run: |
          echo "Testing default configuration..."
          timeout 10 go run example/main.go || echo "Configuration test completed"

  # üê≥ Container image preparation and scanning  
  prepare-metadata:
    name: üê≥ Prepare Container Metadata
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build, test, quality]
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-labels: ${{ steps.meta.outputs.labels }}
      image-digest: ${{ steps.meta.outputs.digest }}
      version: ${{ steps.version.outputs.version }}
      is-main-branch: ${{ steps.branch.outputs.is-main }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üè∑Ô∏è Determine version and branch info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "version=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" = "main" ] || [ "${{ github.ref_name }}" = "master" ]; then
            # Use git describe for semantic versioning on main branch
            VERSION=$(git describe --tags --abbrev=7 2>/dev/null || echo "0.0.0-${GITHUB_SHA:0:7}")
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
          fi

      - name: üå≥ Check if main branch
        id: branch
        run: |
          if [ "${{ github.ref_name }}" = "main" ] || [ "${{ github.ref_name }}" = "master" ]; then
            echo "is-main=true" >> $GITHUB_OUTPUT
          else
            echo "is-main=false" >> $GITHUB_OUTPUT
          fi

      - name: üè∑Ô∏è Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version }}
            type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD-HHmmss'}},format=short
          labels: |
            org.opencontainers.image.title=Template Architecture Lint
            org.opencontainers.image.description=Go-based architecture linting tool with web interface
            org.opencontainers.image.vendor=LarsArtmann
            org.opencontainers.image.licenses=MIT

  # üîí Container vulnerability scanning
  container-security:
    name: üîí Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: prepare-metadata
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: local-scan:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: üõ°Ô∏è Run Trivy vulnerability scanner on container
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'local-scan:latest'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'
          ignore-unfixed: true

      - name: üì§ Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'container-image'

      - name: üîç Run Grype vulnerability scanner
        uses: anchore/scan-action@v4
        id: grype
        with:
          image: local-scan:latest
          fail-build: false
          output-format: sarif

      - name: üì§ Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}
          category: 'container-grype'

  # üèóÔ∏è Multi-architecture container build and push
  build-and-push:
    name: üèóÔ∏è Build & Push Container Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [prepare-metadata, container-security, integration]
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üèóÔ∏è Build and push Docker images
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ needs.prepare-metadata.outputs.image-tags }}
          labels: ${{ needs.prepare-metadata.outputs.image-labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: üìã Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        id: attest
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: üìä Output image information
        run: |
          echo "## üê≥ Container Images Published" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest:** \`${{ steps.push.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tags" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.prepare-metadata.outputs.image-tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SBOM (Software Bill of Materials) generated" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Build provenance attestation signed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Multi-architecture support (AMD64/ARM64)" >> $GITHUB_STEP_SUMMARY

  # üß™ Test published container images
  test-container:
    name: üß™ Test Container Images
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-and-push, prepare-metadata]
    if: needs.prepare-metadata.outputs.is-main-branch == 'true'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: üîß Set up QEMU for multi-arch testing
        uses: docker/setup-qemu-action@v3

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üß™ Test container startup and health check
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-metadata.outputs.version }}"
          echo "Testing image: $IMAGE on platform: ${{ matrix.platform }}"
          
          # Pull the specific platform image
          docker pull --platform=${{ matrix.platform }} "$IMAGE"
          
          # Run container with health check
          CONTAINER_ID=$(docker run -d --platform=${{ matrix.platform }} -p 8080:8080 "$IMAGE")
          
          # Wait for container to start
          sleep 10
          
          # Check if container is running
          if docker ps | grep -q "$CONTAINER_ID"; then
            echo "‚úÖ Container started successfully"
          else
            echo "‚ùå Container failed to start"
            docker logs "$CONTAINER_ID"
            exit 1
          fi
          
          # Test health check endpoint
          for i in {1..10}; do
            if docker exec "$CONTAINER_ID" /server -health-check; then
              echo "‚úÖ Health check passed"
              break
            elif [ $i -eq 10 ]; then
              echo "‚ùå Health check failed after 10 attempts"
              docker logs "$CONTAINER_ID"
              exit 1
            else
              echo "Waiting for health check... (attempt $i/10)"
              sleep 5
            fi
          done
          
          # Clean up
          docker stop "$CONTAINER_ID"
          docker rm "$CONTAINER_ID"

  # üìä Final validation and reporting
  validate-complete:
    name: üìä Final Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [security, build, quality, test, integration, prepare-metadata, container-security, build-and-push]
    if: always()
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: üìä Generate pipeline summary
        run: |
          echo "## üéâ CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Validation: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîí Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üèóÔ∏è Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üìä Quality: ${{ needs.quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üß™ Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîß Integration: ${{ needs.integration.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üê≥ Container Metadata: ${{ needs.prepare-metadata.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîí Container Security: ${{ needs.container-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üèóÔ∏è Build & Push: ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Commit Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Notes" >> $GITHUB_STEP_SUMMARY
          echo "- üèóÔ∏è Architecture linting enabled and enforcing Clean Architecture boundaries" >> $GITHUB_STEP_SUMMARY
          echo "- üìä All quality gates are active and enforced" >> $GITHUB_STEP_SUMMARY
          echo "- üê≥ Container images published to GitHub Container Registry (GHCR)" >> $GITHUB_STEP_SUMMARY
          echo "- üîí Container security scanning with Trivy and Grype" >> $GITHUB_STEP_SUMMARY
          echo "- üèóÔ∏è Multi-architecture builds (AMD64/ARM64) with SBOM and provenance" >> $GITHUB_STEP_SUMMARY

      - name: ‚úÖ Validate all jobs succeeded
        if: ${{ needs.security.result != 'success' || needs.build.result != 'success' || needs.quality.result != 'success' || needs.test.result != 'success' || needs.integration.result != 'success' || needs.prepare-metadata.result != 'success' || needs.container-security.result != 'success' || needs.build-and-push.result != 'success' }}
        run: |
          echo "‚ùå One or more CI jobs failed"
          exit 1

      - name: üéâ Success notification
        if: success()
        run: |
          echo "üéâ All CI/CD checks passed successfully!"
          echo "‚úÖ Ready for deployment"