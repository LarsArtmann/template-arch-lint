# ðŸ”¥ STRICT QUALITY CONFIGURATION
# Maximum enforcement - Zero tolerance for violations

run:
  timeout: 10m
  tests: true
  go: "1.23"
  issues-exit-code: 1

linters:
  default: none  
  enable:
    # Type Safety Enforcement
    - forbidigo      # Custom forbidden patterns
    - govet          # Suspicious constructs
    - staticcheck    # Advanced static analysis
    
    # Error Handling
    - errcheck       # Unchecked errors
    - errorlint      # Error wrapping
    - nilerr         # Nil error returns
    
    # Security
    - gosec          # Security audit
    - copyloopvar    # Loop variable copies
    
    # Code Quality
    - bodyclose      # HTTP body closure
    - cyclop         # Cyclomatic complexity
    - funlen         # Function length
    - gocognit       # Cognitive complexity
    - gocyclo        # Cyclomatic complexity
    - goconst        # Repeated constants
    - gocritic       # Opinionated checks
    - ineffassign    # Ineffective assignments
    - misspell       # Spelling errors
    - nakedret       # Naked returns
    - revive         # Comprehensive checks
    - unconvert      # Unnecessary conversions
    - unparam        # Unused parameters
    - unused         # Unused code
    - whitespace     # Trailing whitespace
    
    # Formatting
    - gofmt          # Standard formatting
    - goimports      # Import formatting

linters-settings:
  # Zero tolerance for type erasure
  forbidigo:
    forbid:
      - p: 'interface\{\}'
        msg: "ðŸš¨ BANNED: interface{} erases type safety"
      - p: '\bany\b'
        msg: "ðŸš¨ BANNED: 'any' erases type safety"
      - p: 'panic\('
        msg: "ðŸš¨ BANNED: panic() causes crashes"
      - p: 'fmt\.Print'
        msg: "ðŸš¨ BANNED: Use structured logging"
    analyze-types: true
  
  cyclop:
    max-complexity: 10
    package-average: 5.0
    
  funlen:
    lines: 50
    statements: 30
    
  gocognit:
    min-complexity: 10
    
  gocyclo:
    min-complexity: 10
    
  gosec:
    excludes: []  # No security exclusions