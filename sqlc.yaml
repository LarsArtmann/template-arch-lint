version: "2"

# SQLC configuration for template-arch-lint project
# Focused on SQLite with comprehensive type-safe database operations

# === GLOBAL VALIDATION RULES ===
# CEL (Common Expression Language) rules for query validation
rules:
  - name: "no-select-star"
    message: "Use explicit column names instead of SELECT *"
    rule: |
      query.sql.contains("SELECT *")

  - name: "no-delete-without-where"
    message: "DELETE statements should include WHERE clauses"
    rule: |
      query.sql.contains("DELETE FROM") && !query.sql.contains("WHERE")

  - name: "no-drop-table"
    message: "DROP TABLE statements are not allowed"
    rule: |
      query.sql.contains("DROP TABLE")

# === SQLITE CONFIGURATION ===
sql:
  - name: "sqlite"
    engine: "sqlite"

    # === QUERY AND SCHEMA PATHS ===
    queries:
      - "sql/queries"              # Directory containing .sql query files
    schema:
      - "sql/schema"               # Directory containing schema files

    # === QUERY VALIDATION SETTINGS ===
    strict_function_checks: false   # Disable for SQLite datetime functions
    strict_order_by: true         # Prevent ambiguous ORDER BY columns

    # === DATABASE CONNECTION SETTINGS ===
    # database:
    #   uri: "${DATABASE_URL:-file:app.db?cache=shared&mode=rwc}"

    gen:
      go:
        package: "db"
        out: "internal/db"
        sql_package: "database/sql"
        build_tags: "sqlite3"

        # === CODE GENERATION OPTIONS ===

        # emit_json_tags: Add `json:"field_name"` tags to generated structs
        emit_json_tags: true

        # emit_db_tags: Add `db:"field_name"` tags to generated structs
        emit_db_tags: true

        # emit_prepared_queries: Generate Prepare() method for pre-compiled SQL statements
        emit_prepared_queries: true

        # emit_interface: Generate a Querier interface for the generated methods
        emit_interface: true

        # emit_exact_table_names: Use exact table names for struct names
        emit_exact_table_names: true

        # emit_empty_slices: Return empty slices instead of nil for :many queries
        emit_empty_slices: true

        # emit_exported_queries: Make autogenerated SQL constants exportable
        emit_exported_queries: true

        # emit_result_struct_pointers: Return pointers to structs from queries
        emit_result_struct_pointers: true

        # emit_params_struct_pointers: Accept pointers for query parameters
        emit_params_struct_pointers: true

        # emit_methods_with_db_argument: Methods take DBTX arg instead of storing on struct
        emit_methods_with_db_argument: false

        # emit_pointers_for_null_types: Use *Type for nullable columns
        emit_pointers_for_null_types: false

        # emit_enum_valid_method: Generate Valid() method for enum types
        emit_enum_valid_method: true

        # emit_all_enum_values: Generate function returning all valid enum values
        emit_all_enum_values: true

        # emit_sql_as_comment: Include original SQL as comment above generated functions
        emit_sql_as_comment: true

        # === NAMING AND STYLE OPTIONS ===

        # json_tags_case_style: Case style for JSON tags
        json_tags_case_style: "camel"

        # omit_unused_structs: Skip generating structs for tables not used in queries
        omit_unused_structs: true

        # omit_sqlc_version: Include sqlc version in generated file headers
        omit_sqlc_version: false

        # === OUTPUT FILE CUSTOMIZATION ===
        output_models_file_name: "models.go"
        output_db_file_name: "db.go"
        output_batch_file_name: "batch.go"

        # === TYPE OVERRIDES ===
        overrides:
          # TEXT -> string: Standard string mapping
          - db_type: "TEXT"
            go_type: "string"
            nullable: false

          # DATETIME/TIMESTAMP -> time.Time: Standard time handling
          - db_type: "DATETIME"
            go_type: "time.Time"
            nullable: true
          - db_type: "TIMESTAMP"
            go_type: "time.Time"
            nullable: true

          # BOOLEAN -> bool: Standard boolean mapping
          - db_type: "BOOLEAN"
            go_type: "bool"

          # INTEGER -> int64: Use int64 for all integers
          - db_type: "INTEGER"
            go_type: "int64"

          # REAL -> float64: Standard floating point mapping
          - db_type: "REAL"
            go_type: "float64"

          # JSON -> json.RawMessage: Preserve raw JSON for flexible handling
          - db_type: "JSON"
            go_type: "json.RawMessage"

          # Custom mapping for user_id columns to use our UserID value object
          - column: "*.id"
            go_type: "github.com/LarsArtmann/template-arch-lint/internal/domain/values.UserID"

        # === COLUMN RENAMING RULES ===
        rename:
          # Standard acronym patterns - follow Go conventions
          id: "ID"
          uuid: "UUID"
          url: "URL"
          api: "API"
          http: "HTTP"
          json: "JSON"
          xml: "XML"
          sql: "SQL"

          # Timestamp patterns
          created_at: "CreatedAt"
          updated_at: "UpdatedAt"
          deleted_at: "DeletedAt"
          created: "Created"
          modified: "Modified"
