# üèóÔ∏è Example Clean Architecture Enforcement
# Simplified configuration for demonstration purposes

version: 3
workdir: .

allow:
  depOnAnyVendor: true
  deepScan: false

# üì¶ SIMPLIFIED ARCHITECTURAL COMPONENTS
components:
  # DOMAIN LAYER - Pure Business Logic
  domain-entities:
    in: internal/domain/entities/**
  domain-values:
    in: internal/domain/values/**
  domain-repositories:
    in: internal/domain/repositories/**
  domain-services:
    in: internal/domain/services/**

  # APPLICATION LAYER - Use Cases
  app-handlers:
    in: internal/application/handlers/**

  # INFRASTRUCTURE LAYER - External Concerns
  infrastructure:
    in: internal/infrastructure/**

  # MAIN APPLICATION
  main:
    in: cmd/**

# üîí CLEAN ARCHITECTURE DEPENDENCY RULES
deps:
  # DOMAIN LAYER - No external dependencies
  domain-entities:
    anyVendorDeps: true
    mayDependOn:
      - domain-values

  domain-values:
    anyVendorDeps: true
    mayDependOn: []

  domain-repositories:
    anyVendorDeps: true
    mayDependOn:
      - domain-entities
      - domain-values

  domain-services:
    anyVendorDeps: true
    mayDependOn:
      - domain-entities
      - domain-repositories
      - domain-values

  # APPLICATION LAYER - Orchestrates domain and infrastructure
  app-handlers:
    anyVendorDeps: true
    mayDependOn:
      - domain-entities
      - domain-services
      - domain-repositories
      - domain-values

  # INFRASTRUCTURE LAYER - Implements domain interfaces
  infrastructure:
    anyVendorDeps: true
    mayDependOn:
      - domain-entities
      - domain-repositories
      - domain-values

  # MAIN - Can depend on everything for wiring
  main:
    anyProjectDeps: true

# üö´ EXCLUDE PATTERNS
exclude:
  - "**/*_test.go"
  - "**/testdata/**"
  - "**/vendor/**"

excludeFiles:
  - ".*_test\\.go$"